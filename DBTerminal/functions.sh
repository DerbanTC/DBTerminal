#!/bin/bash

ExecuteCommand=$1
Argument2=$2
Argument3=$3

getTime() {
	time=$( date +"%T" )
	date=$( date +"%Y:%m:%d" )
	year=$( date +"%Y" )
	month=$( date +"%m" )
	day=$( date +"%d" )
	DayOfWeek=$(date +%u)
	DayOfMonth=$(date +%m)
}

getBackupConfig() {
    bkupconfig=$mcDir$mcServer/$bkupconfName
}

getProperties() {
	mcSrvProperties=$mcDir$mcServer/server.properties
}

getMCSrvJAR() {
    mcSrvJar=$mcDir$mcServer/$jarName
}

getSTDFiles() {
	mcSrvJar=$mcDir$mcServer/$jarName
	bash=$mcDir$mcServer/$StartShellName
	startShell=$mcDir$mcServer/$StartShellName
	bkupconfig=$mcDir$mcServer/$bkupconfName
	eula=$mcDir$mcServer/eula.txt
	mcSrvProperties="$mcDir$mcServer/server.properties"
}

readBackupConf() {
	if [[ -f $bkupconfig ]];then
		AutostartLine=$(grep -o 'autorestart[^"]*' $bkupconfig)
		doAutostart=${AutostartLine#*=}
		BackupLine=$(grep -o 'backup[^"]*' $bkupconfig)
		doBackup=${BackupLine#*=}
	fi
}

setBackupConf() {
	readBackupConf
	if [[ $Argument2 == Autostart ]];then
		setAutostart=$Argument3
		sed -i "s/$AutostartLine/autorestart=$setAutostart/g" $bkupconfig
	elif [[ $Argument2 == Backup ]];then
		setBackup=$Argument3
		sed -i "s/$BackupLine/backup=$Argument3/g" $bkupconfig
	else
		echo -e "${lred}[ERROR/setBackupConf]: -${norm}> Argument2 (Autostart/Backup) wurde vergessen!"
	fi
}

readProperties() {
	if ! [[ -f $mcSrvProperties ]];then
		echo -e "${lred}[ERROR/readProperties]: -${norm}> Keine proberties gefunden fÃ¼r File [$mcSrvProperties]!"
	else
		MCportfull=$(grep -o 'server-port[^"]*' $mcSrvProperties)
		MCport=${MCportfull#*=}
		MCipfull=$(grep -o 'server-ip[^"]*' $mcSrvProperties)
		MCip=${MCipfull#*=}
	fi
}

setProperties() {
	readProperties
	if [[ $Argument2 == Port ]];then
		Port=$Argument3
		sed -i "s/$MCportfull/server-port=$Port/g" $mcSrvProperties
	elif [[ $Argument2 == IP ]];then
		IP=$Argument3
		sed -i "s/$MCipfull/server-ip=$IP/g" $mcSrvProperties
	else
		echo -e "${lred}[ERROR/setProperties]: ${norm}-> Argument2 (Port/IP) wurde vergessen!"
	fi
}

createStdBkupConfig() {
	touch $bkupconfig
	printf '%s\n' '#Do not edit this file!' 'backup=false' 'autorestart=true' > $bkupconfig
	echo -e "${lyellow} > Datei <$bkupconfName> wurde erstellt!${norm}"
}

startMCScreen() {
	varScreen=$(screen -ls | grep MCS_$mcServer)
	if [[ -z $varScreen ]];then
		screen -d -m -S "MCS_$mcServer" bash -c "$bash"
	fi
	unset varScreen
}

detachMCScreen() {
	for screen in $(screen -ls | grep Attached);do
		if [[ "$screen" == *"MCS_"* ]];then
			screen -d $screen
		fi
	done
}

attachMCScreen() {
	varScreen=$(screen -ls | grep MCS_$mcServer | grep Detached)
	if ! [[ -z $varScreen ]];then
		tmux send-key -t Terminal:0.0 "screen -r MCS_$mcServer" C-m
	fi
	unset varScreen
}

checkConditions() {
	StartIsEnabled=doNewInstall
	getSTDFiles
	if [[ -f $bash ]] && [[ -f $mcSrvJar ]] && [[ -f $bkupconfig ]];then
		readBackupConf
		varScreen=$(screen -ls | grep MCS_$mcServer)
		if [[ $doAutostart == true ]] && ! [[ -z $varScreen ]];then
			StartIsEnabled=isRunning
		elif ! [[ -f $mcSrvProperties ]];then
			StartIsEnabled=firstRun
		elif [[ $doAutostart == true ]];then
			StartIsEnabled=doStart
		elif [[ $doAutostart == false ]];then
			StartIsEnabled=noStart
		fi
	elif ! [[ -f $mcSrvJar ]];then
		StartIsEnabled=missingJar
	fi
}

showTimer() {
	unset cancel
	seconds=$Argument2
	n=0
	tmpfile=./showTimerTmpfile
	if [[ -f $tmpfile ]];then
		rm $tmpfile
	fi
	while [[ "$n" -lt $seconds ]] && [[ -z $cancel ]];do
		clear
		n=$(( n + 1 ))
		subN=$(( seconds - n ))
		tellN="${blue}${byellow}$subN Sekunden${norm}"
		if ! [[ -z $headerText ]];then
			echo -e "$headerText"
		fi
		echo -e "$tellN $timerText"
		echo -e "${lred}Tippe ENTER um abzubrechen!${norm}"
		read -t 1 answer
		if [ $? -eq 0 ];then
			echo "isCancelled" > showTimerTmpfile
			cancel=cancelled
			unset headerText
		fi
	done
	unset headerText
}

$ExecuteCommand $Argument2 $Argument3

